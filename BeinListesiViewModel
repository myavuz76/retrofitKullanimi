package com.example.besinuygulamasi.viewModel

import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.besinuygulamasi.Model.Besin
import com.example.besinuygulamasi.service.BesinApiService
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.CompositeDisposable
import io.reactivex.observers.DisposableSingleObserver
import io.reactivex.schedulers.Schedulers


class BesinListesiViewModel : ViewModel() {

    //RecycleView de veri varsa göstercek yoksa göstermeyecek
    //Hata var ise hata mesaji gösterecek yoksa göstermeyeek
    // resim yükleniyor ise göstercek yoksa göstermeyecek
    //Internetten veri cekme islemleri

    //bu islemleri yapabilmek icin MutableLiveData(degistirilebilir) yi kullanarak sürekli bir dinleme yaparak
    // gerceklestiriyoruz

    val besinler = MutableLiveData<List<Besin>>()
    val besinHataMesaji = MutableLiveData<Boolean>()
    val besinYukleniyor = MutableLiveData<Boolean>()

    //intrnetten verilri almak icin ilk önce BesinApiSrvice den bir nesne olusturuyouz

    private val besinApiService= BesinApiService()
    private val disposable = CompositeDisposable()//birlermis disposable

    // disposable bir kere kullan at bir yapi
    // internetten vri cekecegimiz zaman bir kere calisan sonra hafizada yer kaplamamak
    //icin kapanan bir yapi RxJava yapisidir


    fun refreshData(){
       /* val elma  = Besin("elma","100","10","5","1","www.test.com")
        val armut  = Besin("armut","100","10","5","1","www.test.com")
        val portakal  = Besin("portkal","100","10","5","1","www.test.com")
        val muz  = Besin("Muz","100","10","5","1","www.test.com")

        val besinList = arrayListOf<Besin>(elma,armut,portakal,muz)

        besinler.value = besinList
        besinYukleniyor.value= false
        besinHataMesaji.value = false
        */
        verileriInternettenAl()

    }//Refreshdata son

    private fun verileriInternettenAl(){
        besinYukleniyor.value= true
        disposable.add(
            besinApiService.getData()
                .subscribeOn(Schedulers.newThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeWith(object: DisposableSingleObserver<List<Besin>>(){
                    override fun onSuccess(t: List<Besin>) {
                        //basarili olursa ne yapilacak
                        besinler.value =t

                        besinYukleniyor.value= false
                        besinHataMesaji.value=false

                    }

                    override fun onError(e: Throwable) {
                        //bir hata olusursa ne olacak
                        besinYukleniyor.value= false
                        besinHataMesaji.value=true
                        e.printStackTrace()
                    }

                })//subscribeWith son
        )//disposqable.add son
    }//verileri internetten al son
}//BesinListesiViewModel son
